{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aryanlak\\\\Desktop\\\\my project\\\\client\\\\src\\\\components\\\\profiles\\\\Profiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport ProfileItem from './ProfileItem';\nimport { getAllProfiles } from '../../actions/profile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profiles = ({\n  getAllProfiles,\n  profile: {\n    profiles,\n    loading\n  }\n}) => {\n  _s();\n\n  useEffect(() => {\n    getAllProfiles();\n  }, [getAllProfiles]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"large text-primary\",\n        children: \"Developers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"lead\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fab fa-connectdevelop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }, this), \" Browse and connect with developers\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profiles\",\n        children: profiles.length > 0 ? profiles.map(profile => /*#__PURE__*/_jsxDEV(ProfileItem, {\n          profile: profile\n        }, profile._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 33\n        }, this)) : /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"No profiles found...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Profiles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Profiles;\nProfiles.propTypes = {\n  getAllProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getAllProfiles\n})(Profiles);\n\nvar _c;\n\n$RefreshReg$(_c, \"Profiles\");","map":{"version":3,"sources":["C:/Users/aryanlak/Desktop/my project/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","ProfileItem","getAllProfiles","Profiles","profile","profiles","loading","length","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAED,EAAAA,cAAF;AAAkBE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ;AAA3B,CAAD,KAAwD;AAAA;;AACrET,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,cAAc;AACjB,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,sBACI,QAAC,QAAD;AAAA,cACKI,OAAO,gBACJ,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADI,gBAGJ,QAAC,QAAD;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBACKD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GACGF,QAAQ,CAACG,GAAT,CAAaJ,OAAO,iBAChB,QAAC,WAAD;AAA+B,UAAA,OAAO,EAAEA;AAAxC,WAAkBA,OAAO,CAACK,GAA1B;AAAA;AAAA;AAAA;AAAA,gBADJ,CADH,gBAKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANR;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CA7BD;;GAAMN,Q;;KAAAA,Q;AA+BNA,QAAQ,CAACO,SAAT,GAAqB;AACjBR,EAAAA,cAAc,EAAEJ,SAAS,CAACa,IAAV,CAAeC,UADd;AAEjBR,EAAAA,OAAO,EAAEN,SAAS,CAACe,MAAV,CAAiBD;AAFT,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BX,EAAAA,OAAO,EAAEW,KAAK,CAACX;AADe,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAClBe,eADkB,EAElB;AAAEZ,EAAAA;AAAF,CAFkB,CAAP,CAGbC,QAHa,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport ProfileItem from './ProfileItem';\r\nimport { getAllProfiles } from '../../actions/profile';\r\n\r\nconst Profiles = ({ getAllProfiles, profile: { profiles, loading } }) => {\r\n    useEffect(() => {\r\n        getAllProfiles();\r\n    }, [getAllProfiles]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {loading ? (\r\n                <Spinner />\r\n            ) : (\r\n                <Fragment>\r\n                    <h1 className='large text-primary'>Developers</h1>\r\n                    <p className='lead'>\r\n                        <i className='fab fa-connectdevelop' /> Browse and connect with\r\n                        developers\r\n                    </p>\r\n                    <div className='profiles'>\r\n                        {profiles.length > 0 ? (\r\n                            profiles.map(profile => (\r\n                                <ProfileItem key={profile._id} profile={profile} />\r\n                            ))\r\n                        ) : (\r\n                            <h4>No profiles found...</h4>\r\n                        )}\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nProfiles.propTypes = {\r\n    getAllProfiles: PropTypes.func.isRequired,\r\n    profile: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profile\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getAllProfiles }\r\n)(Profiles);\r\n"]},"metadata":{},"sourceType":"module"}